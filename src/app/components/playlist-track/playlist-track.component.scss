/* Base styling remains the same */
:host {
  & ion-item.track {
    --border-width: 0;
    --inner-border-width: 0;
    --border-color: transparent;

    --background: var(--ion-item-background);
    --color: var(--ion-text-color);

    --padding-start: 10px;
    --padding-end: 10px;
    --padding-top: 0px;
    --padding-bottom: 0px;
    --min-height: 72px;

    border-radius: 8px;
    overflow: hidden;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    cursor: pointer;

    ion-thumbnail {
      --size: 56px;
      --border-radius: 4px;
      margin: 0;
      margin-inline-end: 10px;
    }

    ion-label {
      h2 {
        font-weight: 500;
        font-size: 0.9rem;
        margin-bottom: 4px;
      }
      p {
        font-size: 0.75rem;
        opacity: 0.7;
      }
    }
  }

}

:host:hover {
  & ion-item-sliding {
    transform: translateX(-2px);
  }

  & ion-item.track {
    --background: var(--ion-toolbar-background);
    --color: var(--ion-color-primary-contrast);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
}

:host.selected ion-item.track {
  --background: var(--ion-color-primary);
  --color: var(--ion-color-primary-contrast);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.playing-overlay svg path {
  stroke-dasharray: 15 45;
  stroke-dashoffset: 0;
  animation: wave 2s linear infinite;
}

@keyframes wave {
  to {
    stroke-dashoffset: -60;
  }
}

.thumbnail-container {
  position: relative; /* Make this the reference point for absolutely positioned children */
  display: flex; /* Helps ensure the image fills the space */
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Important to prevent the pulsing SVG from overflowing if it extends beyond the thumbnail bounds, though with 24px it might not */
}

/* Styles for the overlay containing the SVG */
.playing-overlay {
  position: absolute; /* Position it relative to .thumbnail-container */
  top: 50%; /* Move top edge to vertical center */
  left: 50%; /* Move left edge to horizontal center */
  transform: translate(-50%, -50%); /* Pull it back by half its own width/height to truly center it */
  z-index: 10; /* Ensure it's above the image */
  /* Optional: Add a semi-transparent background if you want a slight dimming effect over the image */
  /* background-color: rgba(0, 0, 0, 0.3); */
  /* If the image fills the thumbnail, you can make the overlay fill it too for more precise centering */
  width: 100%;
  height: 100%;
  display: flex; /* Use flexbox to center the SVG within the overlay itself */
  justify-content: center;
  align-items: center;
}

/* If the SVG needs specific sizing within the overlay, you can target it directly */
.playing-overlay svg {
  /* The width/height attributes on the SVG itself are often enough,
     but you can explicitly set them here if needed */
  /* width: 24px;
  height: 24px; */
  display: block; /* Remove any extra space below the SVG */
}

/* ========== SortableJS-Specific States ========== */

.sortable-chosen,
.sortable-ghost {
  border: none !important;
  box-shadow: none !important;
  background: transparent !important;
}

/* DRAGGED ELEMENT */
:host.sortable-chosen {
  box-sizing: border-box;
  border-radius: 8px;
  opacity: 0.9;
  z-index: 1000; /* On top of everything */
  margin-bottom: 4px !important; /* Remove extra margin while dragging */

  ion-item {
    height: inherit !important;
    min-height: inherit !important;
    max-height: inherit !important;
    --padding-start: 10px;
    --padding-end: 10px;
    --padding-top: 0px;
    --padding-bottom: 0px;
    --min-height: 72px;
  }
}

:host.sortable-drag {
  opacity: 1 !important;
  background: var(--ion-item-background) !important;
  color: var(--ion-text-color) !important;
  z-index: 1000;
  transform: scale(1.01);
  border-radius: 8px;

  ion-item {
    --background: inherit;
    --color: inherit;
    --padding-start: 10px;
    --padding-end: 10px;
    --padding-top: 0px;
    --padding-bottom: 0px;
    --min-height: 72px;
    display: flex;
    align-items: center;
  }

  ion-thumbnail, ion-label {
    visibility: visible;
  }
}

:host.sortable-drag.selected {
  opacity: 1 !important;
  --background: var(--ion-color-primary);
  --color: var(--ion-color-primary-contrast);
  z-index: 1000;
  transform: scale(1.01);
  border-radius: 8px;

  ion-item {
    --background: inherit;
    --color: inherit;
    --padding-start: 10px;
    --padding-end: 10px;
    --padding-top: 0px;
    --padding-bottom: 0px;
    --min-height: 72px;
    display: flex;
    align-items: center;
  }

  ion-thumbnail, ion-label {
    visibility: visible;
  }
}

ion-item-option {
  padding-left: 10px;
  margin-left: -10px;
  border-bottom-right-radius: 10px;
  border-top-right-radius: 10px;
}

/* PLACEHOLDER ELEMENT (where the dragged item will drop) */
:host.sortable-ghost {
  background: transparent !important;
  border-radius: 8px;
  border: none;
  box-shadow: none;
  opacity: 1;
  margin-bottom: 8px !important;

  height: auto !important;
  min-height: inherit !important;
  max-height: inherit !important;

  ion-item {
    --background: transparent !important;
    --color: transparent !important;

    --padding-start: 12px;
    --padding-end: 12px;
    --padding-top: 4px;
    --padding-bottom: 4px;
    --min-height: 50px;

    display: flex;
    align-items: center;
  }

  ion-thumbnail {
    visibility: hidden;
    width: var(--size, 56px);
    height: var(--size, 56px);
    min-width: var(--size, 56px);
    min-height: var(--size, 56px);
    margin-inline-end: 16px;
    --border-radius: 4px;
  }

  ion-label {
    visibility: hidden;
    flex-grow: 1;
  }
}
